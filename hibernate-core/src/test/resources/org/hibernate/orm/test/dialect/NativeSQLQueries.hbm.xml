<?xml version="1.0"?>
<!--
  ~ /*
  ~  * Hibernate, Relational Persistence for Idiomatic Java
  ~  *
  ~  * License: GNU Lesser General Public License (LGPL), version 2.1 or later.
  ~  * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
  ~  */
  -->

<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ License: GNU Lesser General Public License (LGPL), version 2.1 or later.
  ~ See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
  -->
<!DOCTYPE hibernate-mapping PUBLIC
	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
	"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<!--

  This mapping demonstrates the use of Hibernate with
  all-handwritten SQL!
-->

<hibernate-mapping package="org.hibernate.orm.test.sql.hand" default-access="field">

	<class name="Person" table="PERSON">
		<id name="id" unsaved-value="0" column="PERID">
			<generator class="increment"/>
		</id>
		<property name="name" column="NAME" not-null="true"/>
	</class>

	<sql-query name="getPersonNames">
		<return-scalar column="NAME" type="string"/>
		SELECT p.NAME
		FROM PERSON p
		ORDER BY p.NAME
	</sql-query>

	<sql-query name="getPersonNames2">
		<return-scalar column="NAME" type="string"/>
		SELECT p.NAME
		FROM PERSON p
		ORDER BY p.NAME;
	</sql-query>

	<sql-query name="getPersonNames3">
		<return-scalar column="NAME" type="string"/>
		SELECT p.NAME
		FROM PERSON p
		ORDER BY p.NAME;


	</sql-query>

	<sql-query name="getPersonNames4">
		<return-scalar column="NAME" type="string"/>
		SELECT p.NAME
		FROM PERSON p
		ORDER BY p.NAME ;
	</sql-query>

	<sql-query name="getPersonNames5">
		<return-scalar column="NAME" type="string"/>
		SELECT p.NAME
		FROM PERSON p
		ORDER BY p.NAME  ;


	</sql-query>

	<sql-query name="getPersonNames6">
		<return-scalar column="NAME" type="string"/>
		SELECT p.NAME
		FROM PERSON p
		ORDER BY p.NAME

		;

	</sql-query>

	<sql-query name="getPersonNamesForUpdate">
		<return-scalar column="NAME" type="string"/>
		SELECT p.NAME
		FROM PERSON p
		ORDER BY p.NAME
		FOR UPDATE OF p.NAME
	</sql-query>

	<sql-query name="getPersonNamesForUpdate2">
		<return-scalar column="NAME" type="string"/>
		SELECT p.NAME
		FROM PERSON p
		ORDER BY p.NAME
		FOR UPDATE OF p.NAME;
	</sql-query>

	<sql-query name="getPersonNamesForUpdate3">
		<return-scalar column="NAME" type="string"/>
		SELECT p.NAME
		FROM PERSON p
		ORDER BY p.NAME
		FOR UPDATE OF p.NAME ;
	</sql-query>

	<sql-query name="getPersonNamesForUpdate4">
		<return-scalar column="NAME" type="string"/>
		SELECT p.NAME
		FROM PERSON p
		ORDER BY p.NAME
		FOR UPDATE OF p.NAME
		  ;
	</sql-query>

</hibernate-mapping>